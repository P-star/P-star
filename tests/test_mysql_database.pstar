SCENE main{

	MYSQL mysql;
	
	mysql->connect("localhost", "pstar_test_user", "test");
	mysql->select_db("pstar_test_db");

	mysql->new_statement();

	MYSQL_STMT stmt(mysql->new_statement());
	string err;
	
	SQL create_table_a{ CREATE TABLE IF NOT EXISTS test1(name VARCHAR(128), id INT); };
	SQL create_table_b{ CREATE TABLE IF NOT EXISTS test2(flag BOOLEAN); };
	SQL create_table_c{ CREATE TABLE IF NOT EXISTS test3(f FLOAT, d DOUBLE); };
	SQL create_table_d{ CREATE TABLE IF NOT EXISTS test4(t TIME, d DATE, dt DATETIME); };
	
	stmt->prepare(create_table_a); stmt->execute();
	err = stmt->error(); echo "$err";
	stmt->prepare(create_table_b); stmt->execute(); 
	err = stmt->error(); echo "$err";
	stmt->prepare(create_table_c); stmt->execute(); 
	err = stmt->error(); echo "$err";
	stmt->prepare(create_table_d); stmt->execute(); 
	err = stmt->error(); echo "$err";
	
	SQL clear_table_a{ DELETE FROM test1; };
	SQL clear_table_b{ DELETE FROM test2; };
	SQL clear_table_c{ DELETE FROM test3; };
	SQL clear_table_d{ DELETE FROM test4; };
	
	stmt->prepare(clear_table_a); stmt->execute(); 
	err = stmt->error(); echo "$err";
	stmt->prepare(clear_table_b); stmt->execute(); 
	err = stmt->error(); echo "$err";
	stmt->prepare(clear_table_c); stmt->execute(); 
	err = stmt->error(); echo "$err";
	stmt->prepare(clear_table_d); stmt->execute(); 
	err = stmt->error(); echo "$err";
	
	string name = "Johnny";
	string surename = "Depp - This is a very long string. It might result in a realloc().";
	int width = 4;	
	float pi = "3.14";
	double pi_more = "3.1415926535";
	bool flag = 1;
	TIME tfirst = "6:47:21";
	TIME tsecond = '1567-02-04 00:11';
	TIME tthird = '1975-04-11 23:45';
	uint value_uns = 1234;
	
	/*
	   Problems with the size of long long in P* and MySQL

	llint value_ll = "-123442";
	lluint value_llu = 1233432356;
	SQL insert_ab{ INSERT INTO test1 VALUES( {@surename}, {@value_ll} ) };
	SQL insert_ac{ INSERT INTO test1 VALUES( {@name}, {@value_llu} ) };
	stmt->prepare(insert_ab); stmt->execute(); 
	stmt->prepare(insert_ac); stmt->execute(); 

	*/

	SQL insert_a { INSERT INTO test1 (name, id) VALUES( {@name}, {@width} ) };
	SQL insert_ad{ INSERT INTO test1 (name, id) VALUES( {@surename}, {@value_uns} ) };
	SQL insert_b { INSERT INTO test2 VALUES( {@flag} ); };
	SQL insert_c { INSERT INTO test3 VALUES( {@pi}, {@pi_more} ); };
	SQL insert_d { INSERT INTO test4 VALUES( {@tfirst}, {@tsecond}, {@tthird} ); };

	echo "PASS 1\n";
	stmt->prepare(insert_a); stmt->execute();  
	echo "PASS 2\n";
	stmt->prepare(insert_ad); stmt->execute(); 
	echo "PASS 3\n";
	stmt->prepare(insert_b); stmt->execute();  
	echo "PASS 4\n";
	stmt->prepare(insert_c); stmt->execute();  
	echo "PASS 5\n";
	stmt->prepare(insert_d); stmt->execute();  

	echo "test1 result\n";
	string search = name;
	SQL select_a { SELECT name, id FROM test1 WHERE name={@search} };
	stmt->prepare(select_a);
	stmt->execute();

	MYSQL_ROW row = stmt->get_row_iterator();
	if (!row++) {
		echo "No rows returned";
		return 1;
	}
	echo "Name: " . row["name"] . " ID: " . row["id"] . "\n";

	search = surename;
	stmt->execute();

	row = stmt->get_row_iterator();
	if (!row++) {
		echo "No rows returned";
		return 1;
	}
	echo "Name: " . row["name"] . " ID: " . row["id"] . "\n";

	echo "test2 result\n";
	SQL select_b { SELECT * FROM test2 };
	if (!stmt->prepare(select_b)) {
		echo "Could not prepare SQL: " . stmt->error() . "\n";
	}
	if (!stmt->execute()) {
		echo "Could not execute SQL: " . stmt->error() . "\n";
	}
	row = stmt->get_row_iterator();
	while (row++) {
		echo "" . row["flag"] . "\n";
	}

	echo "test3 result\n";
	SQL select_c { SELECT * FROM test3 };
	if (!stmt->prepare(select_c)) {
		echo "Could not prepare SQL: " . stmt->error() . "\n";
	}
	if (!stmt->execute()) {
		echo "Could not execute SQL: " . stmt->error() . "\n";
	}
	row = stmt->get_row_iterator();
	while (row++) {
		echo "" . row["f"] . "\n";
		echo "" . row["d"] . "\n";
	}

	echo "test4 result\n";
	SQL select_d { SELECT * FROM test4 };
	if (!stmt->prepare(select_d)) {
		echo "Could not prepare SQL: " . stmt->error() . "\n";
	}
	if (!stmt->execute()) {
		echo "Could not execute SQL: " . stmt->error() . "\n";
	}
	row = stmt->get_row_iterator();
	while (row++) {
		echo "" . row["t"] . "\n";
		echo "" . row["d"] . "\n";
	       	echo "" . row["dt"] . "\n";
	}

	echo "done";
}
